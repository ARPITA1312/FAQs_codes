//VALID PARENTHESES

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;

        for(char &ch : s){
            if(st.empty() || ch=='(' || ch=='{' || ch=='['){
                st.push(ch);
                continue;
            }
            if(ch==')'){
                if(st.top()=='(')
                st.pop();
                else
                return false;
            }
            else if(ch == '}'){
                if(st.top()=='{')
                st.pop();
                else 
                return false;
            }
            else if(ch == ']'){
                if(st.top() == '[')
                st.pop();
                else 
                return false;
            }
        }
        return st.empty();
    }
};

//GENERATE PARENTHESES

class Solution {
public:
    vector<string> result;

    bool isValid(string str) {
        int count = 0;

        for(char ch:str) {
            if(ch == '(')
                count++;
            else
                count--;
            if(count < 0)
                return false;
        }
        return count==0;
    }

    void solve(string& curr, int n) {
        if(curr.length() == 2*n) {
            if(isValid(curr)) {
                result.push_back(curr);
            }
            return;
        }

        curr.push_back('(');
        solve(curr, n);
        curr.pop_back();

        curr.push_back(')');
        solve(curr, n);
        curr.pop_back();
    }

    vector<string> generateParenthesis(int n) {
        string curr = "";

        solve(curr, n);

        return result;
    }
};
